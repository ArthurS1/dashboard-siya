variables:
    IMAGE_NAME_DASHBOARD_ADMIN: dashboard-image
    IMAGE_TAG: latest
    NEW_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
    COMMIT_TAG: $CI_COMMIT_SHA
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""

stages:
    - build-dashboard-admin
    - deploy-dashboard-admin

build-dashboard-admin:
    stage: build-dashboard-admin
    image: docker:20.10.17
    services:
        - docker:20.10.17-dind
    variables:
        IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA
        DOCKER_TLS_CERTDIR: ""
    before_script:
        - docker-compose --version
    script:
        - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
        - docker network create traefik-net
        - cp .env.dist .env
        - docker-compose build --no-cache
        - docker tag $IMAGE_NAME_DASHBOARD_ADMIN:$IMAGE_TAG $NEW_IMAGE_NAME:$COMMIT_TAG
        - docker push $NEW_IMAGE_NAME:$COMMIT_TAG
        - docker system prune -f
    only:
      - main

deploy-dev:
  stage: deploy-dashboard-admin
  image:
    name: debian:stable-slim
  before_script:
    # Install dependencies to connect over ssh in the targeted server
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -H $SERVER_DEV_IPv4 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Export to server var env
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "export NEW_IMAGE_NAME=$NEW_IMAGE_NAME"
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "export COMMIT_TAG=$COMMIT_TAG"
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "export IMAGE_NAME_DASHBOARD_ADMIN=$IMAGE_NAME_DASHBOARD_ADMIN"
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "export IMAGE_TAG=$IMAGE_TAG"
    # Login to the private gitlab registry
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin"
    # Pull the image from the private registry
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker pull $NEW_IMAGE_NAME:$COMMIT_TAG"
    # Tag the image
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker tag $NEW_IMAGE_NAME:$COMMIT_TAG $IMAGE_NAME_DASHBOARD_ADMIN:$IMAGE_TAG"
    # Pull from gitlab
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "cd $DEPLOYMENT_LOCATION && git pull"
     # Update .env
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "cd $DEPLOYMENT_LOCATION && cp .env.dist .env"
    # Stop and remove the old containers
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "cd $DEPLOYMENT_LOCATION && docker-compose down"
    # Start the new containers
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "cd $DEPLOYMENT_LOCATION && docker-compose up -d"
    # Remove unused images
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker images -a | grep "main" | awk '{print $3}' | xargs docker rmi; echo OK"
    - ssh -o StrictHostKeyChecking=no $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "docker system prune -f"
  only:
    - main